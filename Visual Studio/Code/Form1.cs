using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;


namespace TrigSolver
{
    public partial class Form1 : Form
    {
        // ============================================================================================================
        //      F I E L D S   &   P R O P E R T I E S
        // ============================================================================================================  
        
        // Constants
        private const byte displayPrecisionAngles = 3;
        private const byte displayPrecisionLengths = 3;

        // Fields
        private string inputs = new string(' ', 3);
        private string units = new string(' ', 3);

        private MyTextBox[] textBoxes = new MyTextBox[6];
        private float[] inputValues = new float[3];

        // Properties
        public string Inputs { get; }
        public string Units { get; }



        // ============================================================================================================
        //      C L A S S   C O N S T R U C T O R
        // ============================================================================================================        



        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Start the form, initialize variables.
        //
        // Approach: Call code generated by the designer to build the form.  Assign textbox controls to an array.
        //           Configure the menu selections based on last used settings.
        //
        public Form1()
        {
            // Runs the code generated by the VS form designer
            InitializeComponent();

            // Assign form controls to class field
            textBoxes[0] = textBoxAlpha;
            textBoxes[1] = textBoxBeta;
            textBoxes[2] = textBoxGamma;
            textBoxes[3] = textBoxA;
            textBoxes[4] = textBoxB;
            textBoxes[5] = textBoxC;





            // This section will be temporary until the SETTINGS are plumbed in
            degToolStripMenuItem.Checked = true;
            units = "DEG";

            aasToolStripMenuItem.Checked = true;
            inputs = "AAS";
            ConfigureTextBoxes(inputs);
            
        }


        #region EVENTS
        // ============================================================================================================
        //      E V E N T   H A N D L E R S
        // ============================================================================================================
        


        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Handler for textbox changes
        //
        // Approach: 
        //
        private void TextBox_TextChanged(object sender, EventArgs e)
        {
            MyTextBox tbx = (MyTextBox)sender;

            if (tbx.Input)
            {
                bool valid = new bool();
                double value = new double();

                // Validate the input
                if (double.TryParse(tbx.Text, out value))
                {
                    if (value > 0) { valid = true; }
                }

                // Additional validation needed here for when 2 angles are given (must not exceed 1*pi)
                if (textBoxes[0].Input && textBoxes[0].Input)
                {
                    if ((Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue) <= 0)
                    {
                        // This is going to be tricky...
                    }
                }

                // Update flags when validation state changes
                if (tbx.Valid != valid)
                {
                    tbx.Valid = valid;
                    if (valid) { tbx.ForeColor = Color.Black; }
                    else { tbx.ForeColor = Color.Red; }
                }

                // Detemine if all inputs are valid
                byte countValidatedInputs = new byte();
                foreach (MyTextBox temp in textBoxes)
                {
                    if (temp.Input  && temp.Valid) { countValidatedInputs++; }
                }


                if (countValidatedInputs == 3)
                {
                    double calc = new double();
                    switch (inputs.Substring(0, 3))
                    {

                        // NOTES:
                        // (01)     Need to account for units on angular calculations

                        case "AAS":

                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get side B.
                            calc = textBoxes[3].NumericValue / Math.Sin(textBoxes[0].NumericValue) * Math.Sin(textBoxes[1].NumericValue);
                            textBoxes[4].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));

                            // Law-Of-Sines to get side C.
                            calc = textBoxes[3].NumericValue / Math.Sin(textBoxes[0].NumericValue) * Math.Sin(textBoxes[2].NumericValue);
                            textBoxes[5].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));

                            break;

                        case "ASA":

                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get side A.
                            calc = textBoxes[5].NumericValue / Math.Sin(textBoxes[2].NumericValue) * Math.Sin(textBoxes[0].NumericValue);
                            textBoxes[3].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            
                            // Law-Of-Sines to get side B.
                            calc = textBoxes[5].NumericValue / Math.Sin(textBoxes[2].NumericValue) * Math.Sin(textBoxes[1].NumericValue);
                            textBoxes[4].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            break;

                        case "SAS":
                            
                            // Law-Of-Cosines to get side C.
                            calc = Math.Sqrt((Math.Pow(textBoxes[3].NumericValue, 2)) + (Math.Pow(textBoxes[4].NumericValue, 2)) - (2 * textBoxes[3].NumericValue * textBoxes[4].NumericValue * Math.Cos(textBoxes[2].NumericValue)));
                            textBoxes[5].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            
                            // Law-Of-Sines to get Alpha.
                            calc = Math.Asin((Math.Sin(textBoxes[2].NumericValue) / textBoxes[5].NumericValue) * textBoxes[3].NumericValue);
                            textBoxes[0].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get Beta.
                            calc = Math.Asin((Math.Sin(textBoxes[2].NumericValue) / textBoxes[5].NumericValue) * textBoxes[4].NumericValue);
                            textBoxes[1].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            break;

                        case "SSS":
                            
                            // Law-Of-Cosines to get Alpha.
                            calc = Math.Acos((Math.Pow(textBoxes[3].NumericValue, 2) - Math.Pow(textBoxes[4].NumericValue, 2) - Math.Pow(textBoxes[5].NumericValue, 2)) / (-2 * textBoxes[4].NumericValue * textBoxes[5].NumericValue));
                            textBoxes[0].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Cosines to get Beta.
                            calc = Math.Acos((Math.Pow(textBoxes[4].NumericValue, 2) - Math.Pow(textBoxes[3].NumericValue, 2) - Math.Pow(textBoxes[5].NumericValue, 2)) / (-2 * textBoxes[3].NumericValue * textBoxes[5].NumericValue));
                            textBoxes[1].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            
                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            break;
                    }
                }
            }
        }











            //float value = new float();
            //string kind = new string(' ', 1);

            //////if (Convert.ToByte(tbx.Tag) < 3)
            //////{
            //////    if ((IsNumericPositive(tbx.Text, out value)))
            //////    {
            //////        tbx.ForeColor = Color.Black;
            //////        inputValues[(Convert.ToByte(tbx.Tag))] = value;
            //////    }
            //////    else
            //////    {
            //////        tbx.ForeColor = Color.Red;
            //////        inputValues[Convert.ToByte(tbx.Tag)] = 0.0f;
            //////    }
            //////}


            //////if ((inputValues[0] * inputValues[1] * inputValues[2]) > 0)
            //////{
            //////ReadInputs();
            //////Triangle myTriangle = new Triangle(inputs, inputValues);

            //////for (byte i = 0; i < 6; i++)
            //////{
            //////    if (Convert.ToByte(textBoxes[i].Tag) > 2)
            //////    {
            //////        switch (i)
            //////        {
            //////            case 0:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.AngleA, displayPrecisionAngles));
            //////                break;
            //////            case 1:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.AngleB, displayPrecisionAngles));
            //////                break;
            //////            case 2:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.AngleC, displayPrecisionAngles));
            //////                break;
            //////            case 3:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.SideA, displayPrecisionLengths));
            //////                break;
            //////            case 4:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.SideB, displayPrecisionLengths));
            //////                break;
            //////            case 5:
            //////                textBoxes[i].Text = Convert.ToString(Math.Round(myTriangle.SideC, displayPrecisionLengths));
            //////                break;
            //////        }
            //////    }
            //////}
            //////}

        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Handler for selections from the OPTIONS menu.
        //
        // Approach: This handler assumes that the event was raised by a ToolStripMenuItem control that is nested under
        //           another control of that same class.
        //           
        //           When the item is already checked do nothing.  When it's not, uncheck all items at the same level
        //           then check the item that raised the event.  Determine if the item that raised the event specifies
        //           an INPUTS setting or a UNITS setting then call a method to process an update.
        //
        private void OptionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem)sender;

            if (!item.Checked)
            {
                foreach (ToolStripMenuItem choice in ((ToolStripDropDownItem)item.OwnerItem).DropDownItems) {choice.Checked = false;}
                item.Checked = true;

                if (((ToolStripMenuItem)item.OwnerItem).Text == "Inputs")
                {
                    inputs = item.Text;
                    ConfigureTextBoxes(item.Text);
                }
                else if (((ToolStripMenuItem)item.OwnerItem).Text == "Units")
                {
                    units = item.Text;
                    ConvertDisplayedUnits();
                }


            }
        }

        #endregion

        #region METHODS
        // ============================================================================================================
        //      M E T H O D S
        // ============================================================================================================
        




        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Update textboxes used for angles.  Convert the values to the desired units.
        //
        // Approach: Go through the first 3 textboxes in the class-level array.  If there is a valid value, convert it.
        //           The conversion is calculated by multiplying the value in the textbox by a scaling factor.
        //
        private void ConvertDisplayedUnits()
        {
            float k = new float();
            float value = new float();
            int i = new int();
            
            if (units == "Degrees") { k = (180 / ((float)Math.PI)); }
            else if (units == "Radians") { k = (((float)Math.PI) / 180); }

            
            for (i = 0; i < 3; i++)
            {
                if (textBoxes[i].ValueF > 0)
                {
                    value = (float)Math.Round((k * value), displayPrecisionAngles);
                    textBoxes[i].Text = Convert.ToString(value);
                }
            }

        }




        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Check if a string is numeric and greater than 0.
        //
        // Approach: Use the TryParse method then check if the value is positive.
        //
        private bool IsNumericPositive(string text, out float value)
        {
            bool ans = new bool();
            float val = new float();

            if (text.Length > 0)
            {
                if (float.TryParse(text, out val))
                {
                    if (val > 0) { ans = true; }

                }
            }
            if (ans) { value = val; } else { value = 0.0f; }
            return ans;
        }



        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Update the TAG property for each of the textbox controls
        //
        // Approach: Each of the textboxes on the form get the TAG property set to a common value then, the TAG for the
        //           three input boxes are changed to unique values {0|1|2}.  The assignment of the value to the control
        //           is hard-coded and based on the input option that is currently selected.
        //
        private void ConfigureTextBoxes(string config)
        {
            foreach (MyTextBox tbx in textBoxes)
            {
                tbx.Text = null;
                tbx.Tag = 6;
                tbx.Enabled = false;
            }

            TextBox[] temp = new TextBox[3];

            switch (config.Substring(0, 3))
            {
                case "AAS":
                    temp[0] = textBoxAlpha;
                    temp[1] = textBoxBeta;
                    temp[2] = textBoxA;
                    break;

                case "ASA":
                    temp[0] = textBoxAlpha;
                    temp[1] = textBoxC;
                    temp[2] = textBoxBeta;
                    break;

                case "SAS":
                    temp[0] = textBoxA;
                    temp[1] = textBoxGamma;
                    temp[2] = textBoxB;
                    break;

                case "SSS":
                    temp[0] = textBoxA;
                    temp[1] = textBoxB;
                    temp[2] = textBoxC;
                    break;
            }

            for (byte i =0; i < 3; i++)
            {
                temp[i].Tag = i;
                temp[i].Enabled = true;
            }

        }



        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        // Puropose: Read the inputs into an array.
        //
        // Approach: Loop through the textboxes, checking the tag value.  When the tag is {0|1|2} record the value in
        //           that same element of an array.
        //
        private void ReadInputs()
        {
            byte tag = new byte();

            foreach (TextBox tbx in textBoxes)
            {
                tag = Convert.ToByte(tbx.Tag);
                if ( tag <= 2)
                {
                    inputValues[tag] = Convert.ToSingle(tbx.Text);
                    if ((inputs.Substring(tag, 1) == "A") && (units == "Degrees"))
                    {
                        inputValues[tag] = (float)(inputValues[tag] * (Math.PI/180));
                    }
                }
            }
        }


        #endregion


    }
}