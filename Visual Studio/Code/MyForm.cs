using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;

namespace TrigSolver
{ 
    public partial class MyForm : Form
    {
        
        // Constants
        private const byte displayPrecisionAngles = 3;
        private const byte displayPrecisionLengths = 3;

        // Fields
        private string inputs = new string(' ', 3);
        private string units = new string(' ', 3);

        private MyTextBox[] textBoxes = new MyTextBox[6];
        private float[] inputValues = new float[3];

        // Properties
        public string Inputs { get; }
        public string Units { get; }

        // Constructor
        public void Form1()
        {
            // Runs the code generated by the VS form designer
            InitializeComponent();

            // Assign form controls to class field
            textBoxes[0] = textBoxAlpha;
            textBoxes[1] = textBoxBeta;
            textBoxes[2] = textBoxGamma;
            textBoxes[3] = textBoxA;
            textBoxes[4] = textBoxB;
            textBoxes[5] = textBoxC;





            // This section will be temporary until the SETTINGS are plumbed in
            degToolStripMenuItem.Checked = true;
            units = "DEG";

            aasToolStripMenuItem.Checked = true;
            inputs = "AAS";
            ConfigureTextBoxes(inputs);
            
        }

        // ================================================================================================================

        #region EVENTS

        private void TextBox_TextChanged(object sender, EventArgs e)
        {
            MyTextBox tbx = (MyTextBox)sender;

            if (tbx.Input)
            {
                bool valid = new bool();
                double value = new double();

                // Validate the input
                if (double.TryParse(tbx.Text, out value))
                {
                    if (value > 0) { valid = true; }
                }

                // Additional validation needed here for when 2 angles are given (must not exceed 1*pi)
                if (textBoxes[0].Input && textBoxes[0].Input)
                {
                    if ((Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue) <= 0)
                    {
                        // This is going to be tricky...
                    }
                }

                // Update flags when validation state changes
                if (tbx.Valid != valid)
                {
                    tbx.Valid = valid;
                    if (valid) { tbx.ForeColor = Color.Black; }
                    else { tbx.ForeColor = Color.Red; }
                }

                // Detemine if all inputs are valid
                byte countValidatedInputs = new byte();
                foreach (MyTextBox temp in textBoxes)
                {
                    if (temp.Input  && temp.Valid) { countValidatedInputs++; }
                }


                if (countValidatedInputs == 3)
                {
                    double calc = new double();
                    switch (inputs.Substring(0, 3))
                    {

                        // NOTES:
                        // (01)     Need to account for units on angular calculations

                        case "AAS":

                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get side B.
                            calc = textBoxes[3].NumericValue / Math.Sin(textBoxes[0].NumericValue) * Math.Sin(textBoxes[1].NumericValue);
                            textBoxes[4].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));

                            // Law-Of-Sines to get side C.
                            calc = textBoxes[3].NumericValue / Math.Sin(textBoxes[0].NumericValue) * Math.Sin(textBoxes[2].NumericValue);
                            textBoxes[5].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));

                            break;

                        case "ASA":

                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get side A.
                            calc = textBoxes[5].NumericValue / Math.Sin(textBoxes[2].NumericValue) * Math.Sin(textBoxes[0].NumericValue);
                            textBoxes[3].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            
                            // Law-Of-Sines to get side B.
                            calc = textBoxes[5].NumericValue / Math.Sin(textBoxes[2].NumericValue) * Math.Sin(textBoxes[1].NumericValue);
                            textBoxes[4].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            break;

                        case "SAS":
                            
                            // Law-Of-Cosines to get side C.
                            calc = Math.Sqrt((Math.Pow(textBoxes[3].NumericValue, 2)) + (Math.Pow(textBoxes[4].NumericValue, 2)) - (2 * textBoxes[3].NumericValue * textBoxes[4].NumericValue * Math.Cos(textBoxes[2].NumericValue)));
                            textBoxes[5].Text = Convert.ToString(Math.Round(calc, displayPrecisionLengths));
                            
                            // Law-Of-Sines to get Alpha.
                            calc = Math.Asin((Math.Sin(textBoxes[2].NumericValue) / textBoxes[5].NumericValue) * textBoxes[3].NumericValue);
                            textBoxes[0].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Sines to get Beta.
                            calc = Math.Asin((Math.Sin(textBoxes[2].NumericValue) / textBoxes[5].NumericValue) * textBoxes[4].NumericValue);
                            textBoxes[1].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            break;

                        case "SSS":
                            
                            // Law-Of-Cosines to get Alpha.
                            calc = Math.Acos((Math.Pow(textBoxes[3].NumericValue, 2) - Math.Pow(textBoxes[4].NumericValue, 2) - Math.Pow(textBoxes[5].NumericValue, 2)) / (-2 * textBoxes[4].NumericValue * textBoxes[5].NumericValue));
                            textBoxes[0].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));

                            // Law-Of-Cosines to get Beta.
                            calc = Math.Acos((Math.Pow(textBoxes[4].NumericValue, 2) - Math.Pow(textBoxes[3].NumericValue, 2) - Math.Pow(textBoxes[5].NumericValue, 2)) / (-2 * textBoxes[3].NumericValue * textBoxes[5].NumericValue));
                            textBoxes[1].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            
                            // Subtract angles from pi to get last angle.
                            calc = (Math.PI - textBoxes[0].NumericValue - textBoxes[1].NumericValue);
                            textBoxes[2].Text = Convert.ToString(Math.Round(calc, displayPrecisionAngles));
                            break;
                    }
                }
            }
        }

        private void OptionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem)sender;

            if (!item.Checked)
            {
                foreach (ToolStripMenuItem choice in ((ToolStripDropDownItem)item.OwnerItem).DropDownItems) { choice.Checked = false; }
                item.Checked = true;

                if (((ToolStripMenuItem)item.OwnerItem).Text == "Inputs")
                {
                    inputs = item.Text;
                    ConfigureTextBoxes(item.Text);
                }
                else if (((ToolStripMenuItem)item.OwnerItem).Text == "Units")
                {
                    units = item.Text;
                    ConvertDisplayedUnits();
                }


            }
        }

        #endregion

        // ================================================================================================================

        #region METHODS

        private void ConvertDisplayedUnits()
        {
            float k = new float();
            float value = new float();
            int i = new int();

            if (units == "Degrees") { k = (180 / ((float)Math.PI)); }
            else if (units == "Radians") { k = (((float)Math.PI) / 180); }


            for (i = 0; i < 3; i++)
            {
                if (textBoxes[i].ValueF > 0)
                {
                    value = (float)Math.Round((k * value), displayPrecisionAngles);
                    textBoxes[i].Text = Convert.ToString(value);
                }
            }

        }

        private bool IsNumericPositive(string text, out float value)
        {
            bool ans = new bool();
            float val = new float();

            if (text.Length > 0)
            {
                if (float.TryParse(text, out val))
                {
                    if (val > 0) { ans = true; }

                }
            }
            if (ans) { value = val; } else { value = 0.0f; }
            return ans;
        }

        private void ConfigureTextBoxes(string config)
        {
            foreach (MyTextBox tbx in textBoxes)
            {
                tbx.Text = null;
                tbx.Tag = 6;
                tbx.Enabled = false;
            }

            TextBox[] temp = new TextBox[3];

            switch (config.Substring(0, 3))
            {
                case "AAS":
                    temp[0] = textBoxAlpha;
                    temp[1] = textBoxBeta;
                    temp[2] = textBoxA;
                    break;

                case "ASA":
                    temp[0] = textBoxAlpha;
                    temp[1] = textBoxC;
                    temp[2] = textBoxBeta;
                    break;

                case "SAS":
                    temp[0] = textBoxA;
                    temp[1] = textBoxGamma;
                    temp[2] = textBoxB;
                    break;

                case "SSS":
                    temp[0] = textBoxA;
                    temp[1] = textBoxB;
                    temp[2] = textBoxC;
                    break;
            }

            for (byte i = 0; i < 3; i++)
            {
                temp[i].Tag = i;
                temp[i].Enabled = true;
            }

        }

        private void ReadInputs()
        {
            byte tag = new byte();

            foreach (TextBox tbx in textBoxes)
            {
                tag = Convert.ToByte(tbx.Tag);
                if (tag <= 2)
                {
                    inputValues[tag] = Convert.ToSingle(tbx.Text);
                    if ((inputs.Substring(tag, 1) == "A") && (units == "Degrees"))
                    {
                        inputValues[tag] = (float)(inputValues[tag] * (Math.PI / 180));
                    }
                }
            }
        }

        #endregion

    }
}